쿠버네티스의 핵심 6가지
1. 대규모의 유저 요청을 받아들이는 서비스의 백엔드에 적합한 플랫폼으로, 지속적통합(CI)과 지속적배포(CD)에 적합한 구조를 가진다.
2. 퍼블릭 클라우드와 온프레미스에서 동일한 방식으로 사용 가능하다.
3. 컨테이너 기술을 통해 애플리케이션과 서버 인프라를 분리하여 변화에 대응할 수 있는 유연성과 확정성을 제공한다.
4. CNCF는 많은 기업의 지지를 받으며 빠르게 성장해, 정식 서비스에 운영할 수 있을 정도로 성숙하여 많은 기업들이 활용 하고 있다.
5. EKS, IKS, NKS, GKS, AKS등 클라우드 관리형 쿠버네티스 서비스를 제공하고 있어, 온프레미스에서도 클라우드로 쉽게 마이그레이션이 가능 하다.
6. 쿠버네티스 아키텍쳐는 마스터와 노드로 구성되며, 마스터가 노드를 제어, 노드에서 컨테이너가 기동 된다.


컨테이너(도커) 하용 하는 이유

1. 인프라의 사용률 향상
- 하나의 물리 서버나 가상 서버 위에서 여러 개의 컨테이너를 돌릴 수 있다.
- CPU와 메모리 사용률을 높여 하드웨어를 효율적으로 사용 할 수 있다.

2.빠른 기동 시간
- VM, 물리서버 보다 기동 시간이 빠름
- os, app등의 이미지를 쉽게 얻을 수 있다
- 설치 및 설정 작업이 줄어든다.
- 네트워크. 볼륨(외부 저장)을 소프트웨어 정의 오브젝트로 작성 할 수 있다.

3. 불변 실행 환경
- 앱 실행에 필요한 software 모두 포함하여 컨테이너 작성 가능
- 특정 서버 환경에 대한 종속성을 배재할 수 있다.
- 개발, 운영 환경의 차이를 줄 일 수 있다.



쿠버네티스 도커 연동

- 쿠버네티스틑 도커를 컨테이너 런타임 환경으로 사용

리눅스 커널 기술
1. 네임스페이스
- 리눅스 커널에 사용된 기술로 컨테이너가 하나의 독립된 서버와 같이 동작 할 수 있게 한다. 특정 프로세스를 다른 프로세스로부터 분리시켜 같은 네이스페이스 내에서만 접근하게 제어 할 수 있다.
pid(process id) : 리눅스 커널의 프로세스 ID 분리, Net(networking) : 네트워크 인터페이스 관리 , ipc(inter process Communication) : 프로세스간 통신 접근 관리
mnt(mount) : 파일 시스템의 마운트 관리, uts(unix Timesharing system) : 커널과 버전 식별자 관리

2. 컨트롤 그룹-> docker는 리눅스 커널의 cgroup을 사용. 프로세스별로 cpu  시간, 메모리 사용량과 같은 자원을 감시하고 제한함.
3. 유니온 파일 시스템 -> 다른 파일스템에서 파일이나 디렉토리를 투과적으로 겹처서, 하나의 일관적인 파일 시스템으로 사용 할 수 있게 한다.
4. OCI(open container initiative) 

쿠버네티스 API란?
-> 쿠버네티스에 대한 조작은 모두 API를 통해 이뤄진다. kubectl은 마스터 노드상의 kube-apiserver에게 쿠버네티스 API규약에 맞게 기술된 목표 상태 선언서인 yaml형 식 혹은 json형식으로 전송하여
오브젝트를 만들고, 바꾸고, 제거하는 일을 한다. 

오브젝트란?
K8s 클러스터 내부의 엔티티로서 파드, 컨트롤러, 서비스 등의 인스턴스를 의미한다. 각각의 오브젝트는 API의 리소스 종류에 맞게 설정 되고 생성됨. 오브젝트는 지정된 상태가 유지되도록 쿠버네티스에 의해 제어됨.
각 오브젝트는 메타데이터(yaml or json)에 기술된 이름에 의해 식별, 오브젝트 생성시 반드시 네이밍 해야함. 네임스페이스는 k8s클러스터를 논리적으로 분할하여 사용하기 위해 존재하는 기능.

워크로드란?
오브젝트의 카테고리르 나타내는 용어로 컨테이너, 파드 , 컨트롤러 그룹을 의미함. 컨테이너의 실행을 관리 하기 위해 사용. 

컨테이너
-> 반드시 파드내에서 실행 되어야함. 컨테이너 기동 시 설정할 수 있는 항목은 이미지의 이름, 실행 명령어, 실행 인자, 환경 변수, 불륨, Cpu 사용 시간과 메모리 크기의 요청값 및 상한값 등 있음.

파드
-> 컨테이너를 실행하기 위한 오브젝트,내부의 컨테이너들은 파드의 IP주소와 포트 번호를 공유, 내부 컨테이너들은 Localhost로 서로 통신 할 수 있다, System V 프로세스 통신이나 POSIX 공유 메모리를 사용하여
서로 통신한다.
